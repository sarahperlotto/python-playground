import base64
import xml.dom.minidom

base64_string = """

"""
decode_bytes = base64.b64decode(base64_string)
print(decode_bytes)
exit(0)

# TODO...
decode_string = decode_bytes.decode()
xml_dom = xml.dom.minidom.parse(decode_string)
pretty_xml = xml_dom.toprettyxml()
print(pretty_xml)
